import React, { useState, FC } from "react";
import { InputFieldProps } from "./Input.types";
import TextField from "@mui/material/TextField";
import { IconButton, Typography } from "@mui/material";
import "./inputField.css";
import theme from "../../themes/theme";

const InputTextField: FC<InputFieldProps> = (props) => {
  const [inputValue, setInputValue] = useState("");
  const { icon, label, variant, sx, inputProps, size, disabled, readOnly = false, max = 16, min = 2, ...rest } = props;

  const inputSizesClassNames = {
    small: "input--small",
    medium: "input--medium",
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const regex = /^[A-Za-z0-9_-]*$/; // Valid characters: English letters, numbers, hyphen, and underscore
    const val = e.target.value;
    const isValid = regex.test(val);

    // Check input characters againt min and max length values
    if (isValid && val.length <= max) {
      setInputValue(val);
      if (val.length >= min) rest.onChange(e);
    }
  };

  return (
    <TextField
      value={inputValue}
      label={!inputValue ? <Typography variant="body5">{label}</Typography> : null}
      InputProps={{
        ...inputProps,
        readOnly: readOnly,
        autoComplete: "off",
        endAdornment: (
          <IconButton
            sx={{
              padding: 0,
              "& > svg > path": {
                stroke: disabled ? theme.palette.text.disabled : theme.palette.primary.main,
              },
              display: !inputValue ? "block" : "none",
            }}
            disabled={disabled}
          >
            {icon}
          </IconButton>
        ),
      }}
      variant={variant}
      sx={{
        ...sx,
        backgroundColor: theme.palette.background.paper,
        "& label.MuiInputLabel-shrink": {
          border: `0.5px solid ${theme.divider.blue}`,
          background: theme.palette.background.default,
          color: theme.palette.text.secondary,
        },
        "& input:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 1000px #fff inset",
          WebkitTextFillColor: theme.palette.text.primary,
        },
        "& Mui-error": {
          marginLeft: 0,
        },
      }}
      size={size}
      className={`input-wrapper ${inputSizesClassNames[size]}`}
      margin="none"
      disabled={disabled}
      onChange={handleInputChange}
      onBlur={rest.onBlur}
      required={rest.required}
      error={rest.error}
      helperText={rest.helperText}
      type={rest.type}
      autoComplete="off"
    />
  );
};

export default InputTextField;
